struct a {
    b: Type3,
    c: Type4
}

struct b {
    c: Type3,
    d: Type4
}

struct c {
    fn de(d: d) -> dd {
        return 3;
    },
    c: types4
}

fn de() {
    while a > 3 {
        let mut a = 3;
        while a < 3 {
            return 3;
        }

        {
            let mut c = 3;
            c += 3;
            c = c + 3;
            c -= 3 + 4;
        } loop false;
        a = 4;
    }

    {
        return 3;
        while 3 > 4 {
            
        }
        {
            return 3;
        } loop 4 == 4;
    } loop a > 3;
    return 3;
}

fn main(param1: Type1, param2: Type2) -> Identity_Type {
    let mut a = 3;
    let b = 4;
    let c = 10;
    let c_3 = 100;
    c[1]->0 = 1;
    let c = !(4 + 4 - 5 / 50);
    let b = +(34) - !true / 100 > 100 == 3.2 & 3 | 4 && 44 || 55;
    let sss = (!(bool) + ((3) || 3));
    let c = a > 3;
    let c: int = 3;
    let mut c: [int; 4] = b;
    let mut c = 3 + match true {
        3: {
            return 4;
        },
        4: {
            return 5;
        }
    };

    if 3 > 4 {
        if 4 > 5 {
            let mut a = 3;
        } else {
            c = 4;
        }
    } else if 4 == 5 {
        return 3;
        if 4 > 5 {
            return 4;
        } else if a > b {
            return c + 3;
        } else if b == c {
            let mut c = 4;
        }
    } else {
        let mut s = 3;
    }

    a = 4;
    return 3;
    let a = 3, b = 5, a: ff = 55;
    return c->0->4->dosomthing(4, 66, a);
}
